resource_types:
  - name: slack-alert
    type: registry-image
    source:
      repository: arbourd/concourse-slack-alert-resource

  - name: gitea-package
    type: registry-image
    source:
      repository: mattcl/concourse-gitea-package
      tag: "0.2.1"

# common flags we want to set on all jobs
job-common-settings: &job-common
  # I guess we want to prevent multiple builds conflicting with each other
  max_in_flight: 1
  build_log_retention:
    days: 2
    builds: 20
    minimum_succeeded_builds: 1
  on_success:
    put: notify
    params:
      alert_type: success
  on_failure:
    put: notify
    params:
      alert_type: failed
  on_abort:
    put: notify
    params:
      alert_type: aborted
  on_error:
    put: notify
    params:
      alert_type: errored

resources:
  - name: ci
    type: git
    icon: github
    source:
      uri: https://github.com/mattcl/rust-ci.git
      ignore_paths:
        - 'README.md'

  # the user-specified repo under test
  - name: ((bin.name))
    type: git
    icon: github
    source:
      uri: ((bin.repo.uri))
      ignore_paths:
        - 'README.md'

  - name: nightly
    type: registry-image
    icon: docker
    source:
      repository: mattcl/ci-rust-nightly
      tag: latest
      username: ((dockerhub.user))
      password: ((dockerhub.token))

  - name: slim
    type: registry-image
    icon: docker
    source:
      repository: mattcl/ci-rust-slim
      tag: ((rust.version))
      username: ((dockerhub.user))
      password: ((dockerhub.token))

  - name: alpine
    type: registry-image
    icon: docker
    source:
      repository: mattcl/ci-rust-alpine
      tag: ((rust.version))
      username: ((dockerhub.user))
      password: ((dockerhub.token))

  - name: gitea-package
    type: gitea-package
    icon: package-up
    source:
      uri: ((gitea-package.uri))
      owner: ((gitea-package.owner))
      token: ((gitea-package.token))
      package: ((bin.name))
    tags:
      - internal

  - name: notify
    type: slack-alert
    icon: slack
    source:
      url: ((slack.webhook-url))
      channel: ((slack.channel))
      concourse_url: ((server.url))

jobs:
  - name: stable-alpine
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
        - get: alpine
          trigger: true

      - task: test
        image: alpine
        tags:
          - internal
        file: ci/tasks/lint-and-test.yaml
        input_mapping:
          repo: ((bin.name))
        vars:
          script-path: ((lint-and-test.script-path))
        params:
          CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
          CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
          EXTRA_CARGO_BUILD_FLAGS: "((alpine.cargo.extra-build-flags))"
          EXTRA_CARGO_TEST_FLAGS: "((alpine.cargo.extra-test-flags))"

  - name: stable-slim
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
        - get: slim
          trigger: true

      - task: test
        image: slim
        tags:
          - internal
        file: ci/tasks/lint-and-test.yaml
        input_mapping:
          repo: ((bin.name))
        vars:
          script-path: ((lint-and-test.script-path))
        params:
          CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
          CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
          EXTRA_CARGO_BUILD_FLAGS: "((slim.cargo.extra-build-flags))"
          EXTRA_CARGO_TEST_FLAGS: "((slim.cargo.extra-test-flags))"

  - name: nightly
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
        - get: nightly
          trigger: true

      - task: test
        image: nightly
        tags:
          - internal
        file: ci/tasks/lint-and-test.yaml
        input_mapping:
          repo: ((bin.name))
        vars:
          script-path: ((lint-and-test.script-path))
        params:
          CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
          CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
          EXTRA_CARGO_BUILD_FLAGS: "((nightly.cargo.extra-build-flags))"
          EXTRA_CARGO_TEST_FLAGS: "((nightly.cargo.extra-test-flags))"
          LINT: "0"

  - name: check-msrv
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
          passed:
            - stable-alpine
            - stable-slim
        - get: nightly
          trigger: false

      - in_parallel:
        - do:
          - task: find-min-versions
            image: nightly
            tags:
              - internal
            file: ci/tasks/min-versions.yaml
            input_mapping:
              repo: ((bin.name))
            params:
              CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
              CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))

          - task: min-dependency-versions
            tags:
              - internal
            file: ci/tasks/msrv.yaml
            input_mapping:
              repo: repo
            vars:
              script-path: ((msrv.script-path))
            params:
              CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
              CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
              UPDATE_DEPS: "0"

        - task: max-dependency-versions
          tags:
            - internal
          file: ci/tasks/msrv.yaml
          input_mapping:
            repo: ((bin.name))
          vars:
            script-path: ((msrv.script-path))
          params:
            CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
            CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))

  - name: audit-dependencies
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
          passed:
            - stable-alpine
        - get: alpine
          passed:
            - stable-alpine
          trigger: false

      - task: audit-deps
        image: alpine
        tags:
          - internal
        file: ci/tasks/cargo-audit.yaml
        input_mapping:
          repo: ((bin.name))
        params:
          CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
          CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))

  - name: build-release
    <<: *job-common
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: ((bin.name))
          trigger: true
          passed:
            - check-msrv
            - audit-dependencies
        - get: alpine
          passed:
            - stable-alpine
          trigger: false
        - get: slim
          passed:
            - stable-slim
          trigger: false

      - in_parallel:
        - task: gnu
          image: slim
          tags:
            - internal
          file: ci/tasks/build-release.yaml
          input_mapping:
            repo: ((bin.name))
          output_mapping:
            release: gnu-release
          vars:
            script-path: ((build-release.script-path))
          params:
            CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
            CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
            # TODO: support multiple files
            BIN_NAME: ((bin.bin-name))
            TARGET: x86_64-unknown-linux-gnu

        - task: musl
          image: alpine
          tags:
            - internal
          file: ci/tasks/build-release.yaml
          input_mapping:
            repo: ((bin.name))
          output_mapping:
            release: musl-release
          vars:
            script-path: ((build-release.script-path))
          params:
            CARGO_REGISTRIES_ANCALAGON_INDEX: ((ancalagon-registry.index))
            CARGO_REGISTRIES_ANCALAGON_TOKEN: ((ancalagon-registry.token))
            # TODO: support multiple files
            BIN_NAME: ((bin.bin-name))
            TARGET: x86_64-unknown-linux-musl

      - load_var: bin-version
        file: gnu-release/VERSION

      - load_var: gnu-file
        file: gnu-release/ARCHIVE_NAME

      - load_var: musl-file
        file: musl-release/ARCHIVE_NAME

      - put: gitea-package
        tags:
          - internal
        inputs:
          - gnu-release
          - musl-release
        params:
          version: ((.:bin-version))
          files:
            - gnu-release/((.:gnu-file))
            - musl-release/((.:musl-file))
